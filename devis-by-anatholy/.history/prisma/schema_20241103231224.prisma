datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum DocumentType {
  devis
  facture
}


generator client {
  provider = "prisma-client-js"
}

model Document {
  id        String      @id @default(cuid())
  nom       String
  type      DocumentType
  url       String
  devis     Devis?
  devisId   Int?     @unique
  facture   Facture? 
  factureId Int?     @unique
}
model Devis {
  id        String      @id @default(cuid())
  numDevis  Int
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  montant   Float
  date      DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  document  Document @relation(fields: [documentId], references: [id])
  documentId String @unique
}

model Facture {
  id        String      @id @default(cuid())
  numFacture  Int
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  montant   Float
  date      DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  document  Document @relation(fields: [documentId], references: [id])
  documentId String @unique
}


model Client {
  id        String      @id @default(cuid())
  nom       String
  prenom    String
  email     String
  telephone String
  adresse   String
  ville     String
  codePostal String
  Siret     String
  NomSociete String
  devis     Devis[]
  factures  Facture[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}


model User {
  id         String        @id @default(cuid())
  email    String   @unique
  password String
  role     String
  name      String?
  emailVerified DateTime?
  prenom   String
  telephone String
  adresse  String
  ville    String
  codePostal String
  Siret    String
  NomSociete String
  devis    Devis[]
  factures Facture[]
  clients  Client[]
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 

 model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}